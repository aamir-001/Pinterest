<div class="board-header">
    <div class="board-title">
        <h2><%= board.board_name %></h2>
        <p><%= board.description %></p>
    </div>
    
    <div class="board-actions">
        <a href="#" class="add-pin-btn">+ Add Pin</a>
        <% if (user.user_id === board.user_id) { %>
            <button class="edit-board-btn">Edit</button>
            <button class="delete-board-btn" onclick="openDeleteBoardModal()">Delete</button>
        <% } %>
    </div>
</div>

<!-- Add this modal for confirming board deletion -->
<div id="deleteBoardModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Delete board?</h3>
            <span class="close-modal" onclick="closeDeleteBoardModal()">&times;</span>
        </div>
        
        <div class="modal-body">
            <p>Are you sure you want to delete "<%= board.board_name %>"? This will permanently delete all pins on this board.</p>
            <p class="delete-warning">This action cannot be undone.</p>
            
            <div class="form-actions">
                <button type="button" class="btn-cancel" onclick="closeDeleteBoardModal()">Cancel</button>
                <form action="/boards/<%= board.board_id %>/delete" method="POST" style="display: inline;">
                    <button type="submit" class="btn-danger">Delete Board</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="pins-container">
    <% if (pins && pins.length > 0) { %>
        <div class="pins-grid">
            <% pins.forEach(pin => { %>
                <div class="pin-card" data-pin-id="<%= pin.pin_id %>">
                    <div class="pin-image-container">
                        <img src="<%= pin.system_url %>" alt="<%= pin.description || 'Pin' %>" 
                            class="pin-image" 
                            onerror="this.onerror=null; this.src='/images/pin-placeholder.jpg';">
                    </div>
                    <div class="pin-info">
                        <p class="pin-description"><%= pin.description %></p>
                        <div class="pin-meta">
                            <span><%= pin.like_count %> likes</span>
                            <span><%= pin.comment_count %> comments</span>
                        </div>
                    </div>

                    <% if (user.user_id === board.user_id) { %>
                    <div class="pin-actions">
                        <form action="/pins/<%= pin.pin_id %>/delete?boardId=<%= board.board_id %>" method="POST" class="delete-pin-form">
                            <button type="submit" class="delete-pin-btn" title="Delete Pin" onclick="return confirm('Are you sure you want to delete this pin?');">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="3 6 5 6 21 6"></polyline>
                                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                    <line x1="10" y1="11" x2="10" y2="17"></line>
                                    <line x1="14" y1="11" x2="14" y2="17"></line>
                                </svg>
                                <span class="sr-only">Delete</span>
                            </button>
                        </form>
                    </div>
                <% } %>
                </div>
            <% }); %>
        </div>
    <% } else { %>
        <div class="empty-board">
            <img src="/api/placeholder/100/100" alt="Pin" class="empty-board-icon">
            <h3>This board has no pins yet</h3>
            <p>Add pins to populate your board</p>
            <a href="#" class="add-pin-btn">Add Your First Pin</a>
        </div>
    <% } %>
</div>

<!-- Add Pin Modal -->
<div id="addPinModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Add a pin</h3>
            <span class="close-modal">&times;</span>
        </div>
        
        <form id="addPinForm" action="/pins/create" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="board_id" value="<%= board.board_id %>">
            
            <div class="pin-source-container">
                <p class="pin-source-label">Add a pin from:</p>
                <div class="pin-source-tabs">
                    <button type="button" class="pin-source-tab active" data-source="upload">Upload</button>
                    <button type="button" class="pin-source-tab" data-source="url">URL</button>
                </div>
            </div>
            
            <div id="uploadSection" class="pin-source-section active">
                <div class="form-group">
                    <div class="upload-input-container">
                        <input type="file" id="pinImage" name="image_file" accept="image/*">
                        <div class="upload-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"></path>
                                <polyline points="17 8 12 3 7 8"></polyline>
                                <line x1="12" y1="3" x2="12" y2="15"></line>
                            </svg>
                        </div>
                        <p class="upload-text">Click to upload</p>
                    </div>
                    <div class="image-preview-container"></div>
                </div>
            </div>
            
            <div id="urlSection" class="pin-source-section">
                <div class="form-group">
                    <label for="pinUrl">Image URL</label>
                    <div class="url-input-container">
                        <input type="url" id="pinUrl" name="image_url" placeholder="https://example.com/image.jpg">
                    </div>
                    <div class="url-preview-container"></div>
                </div>
                
                <div class="form-group">
                    <label for="sourceUrl">Source Website (optional)</label>
                    <input type="url" id="sourceUrl" name="source_url" placeholder="https://example.com/page-with-image">
                </div>
            </div>
            
            <div class="pin-source-section active">
                <div class="form-group">
                    <label for="pinDescription">Description</label>
                    <textarea id="pinDescription" name="description" placeholder="Describe this pin"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="pinTags">Tags (comma separated)</label>
                    <input type="text" id="pinTags" name="tags" placeholder="nature, mountains, hiking">
                </div>
            </div>
            
            <div class="pin-form-actions">
                <button type="button" class="cancel-btn" onclick="closePinModal()">Cancel</button>
                <button type="submit" class="create-pin-btn">Create Pin</button>
            </div>
        </form>
    </div>
</div>

<!-- Pin Detail Modal -->
<div id="pinDetailModal" class="modal">
    <div class="modal-content pin-detail-modal">
        <div class="modal-header">
            <span class="close-modal" id="closePinDetailModal">&times;</span>
        </div>

        <div class="pin-detail-content">
            <div class="pin-detail-image-container">
                <img id="pinDetailImage" src="" alt="Pin Detail" class="pin-detail-image">
            </div>

            <div class="pin-detail-info">
                <div class="pin-detail-info-content">
                    <h3 id="pinDetailDescription" class="pin-detail-title"></h3>

                    <div class="pin-detail-meta">
                        <button id="likeButton" class="like-button">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="like-icon">
                                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                            </svg>
                            <span id="likeCount">0</span> likes
                        </button>

                        <!-- Add Repin Button -->
                        <button id="repinButton" class="repin-button">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="repin-icon">
                                <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                            </svg>
                            Repin
                        </button>
                    </div>

                    <div class="comments-section">
                        <h4>Comments</h4>
                        <div id="commentsContainer" class="comments-container">
                            <!-- Comments will be loaded here -->
                        </div>
                    </div>
                </div>

                <div class="comment-form-container">
                    <form id="commentForm" class="comment-form">
                        <input type="hidden" id="pinIdInput" name="pin_id" value="">
                        <textarea id="commentText" name="content" placeholder="Add a comment..."></textarea>
                        <button type="submit" class="comment-submit-btn">Post</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Repin Modal -->
<div id="repinModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Save to board</h3>
            <span class="close-modal" id="closeRepinModal">&times;</span>
        </div>

        <form id="repinForm" action="/pins/repin" method="POST">
            <input type="hidden" id="repinPinId" name="pin_id" value="">

            <div class="form-group">
                <label for="repinBoard">Choose a board</label>
                <select id="repinBoard" name="board_id" class="form-control" required>
                    <!-- Boards will be loaded dynamically -->
                </select>
            </div>

            <div class="form-group">
                <label for="repinDescription">Description (optional)</label>
                <textarea id="repinDescription" name="description" class="form-control" rows="3" placeholder="Tell people what this pin is about..."></textarea>
            </div>

            <div class="form-actions">
                <button type="button" class="btn-cancel" onclick="closeRepinModal()">Cancel</button>
                <button type="submit" class="btn-create">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
    // Get the pin modal
    const pinModal = document.getElementById('addPinModal');
    
    // Get all buttons that open the modal
    const addPinBtns = document.querySelectorAll('.add-pin-btn');
    
    // Get the <span> element that closes the modal
    const closePinBtn = pinModal.querySelector('.close-modal');
    
    // When the user clicks the button, open the modal 
    addPinBtns.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            pinModal.style.display = "block";
            document.body.style.overflow = "hidden"; // Prevent scrolling
        });
    });
    
    // When the user clicks on <span> (x), close the modal
    closePinBtn.addEventListener('click', function() {
        closePinModal();
    });
    
    // When the user clicks anywhere outside of the modal, close it
    window.addEventListener('click', function(event) {
        if (event.target == pinModal) {
            closePinModal();
        }
    });
    
    // Close modal function
    function closePinModal() {
        pinModal.style.display = "none";
        document.body.style.overflow = "auto"; // Re-enable scrolling
    }
    
    // Preview image before upload
    document.getElementById('pinImage').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.createElement('div');
                preview.innerHTML = `<img src="${e.target.result}" style="max-width: 100%; max-height: 200px; margin-top: 10px;">`;
                const container = document.querySelector('#pinImage').parentNode;
                
                // Remove previous preview if exists
                const oldPreview = container.querySelector('.image-preview');
                if (oldPreview) container.removeChild(oldPreview);
                
                preview.className = 'image-preview';
                container.appendChild(preview);
            }
            reader.readAsDataURL(file);
        }
    });

    // ----------------------------------------------
    // Pin Detail Modal Functionality
    const pinDetailModal = document.getElementById('pinDetailModal');
    const pinDetailImage = document.getElementById('pinDetailImage');
    const pinDetailDescription = document.getElementById('pinDetailDescription');
    const likeCount = document.getElementById('likeCount');
    const pinIdInput = document.getElementById('pinIdInput');
    const closePinDetailModal = document.getElementById('closePinDetailModal');
    
    // Add click event to all pin images
    document.querySelectorAll('.pin-card').forEach(card => {
        card.addEventListener('click', function() {
            const pinId = this.getAttribute('data-pin-id');
            
            // Check if pinId is valid
            if (!pinId || pinId === 'null' || pinId === 'undefined') {
                console.error('Invalid pin ID:', pinId);
                alert('Error: Invalid pin ID');
                return;
            }
            
            // Show loading state
            pinDetailModal.style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent scrolling
            pinDetailImage.src = ''; // Clear previous image
            pinDetailDescription.textContent = 'Loading...';
            likeCount.textContent = '0';
            document.getElementById('commentsContainer').innerHTML = '<p class="no-comments">Loading comments...</p>';
            
            // Get pin details including like status
            fetch(`/pins/${pinId}/details`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    const pin = data.pin;
                    
                    // Set modal content
                    pinDetailImage.src = pin.system_url;
                    pinDetailDescription.textContent = pin.description;
                    likeCount.textContent = pin.like_count;
                    pinIdInput.value = pinId;
                    
                    // Set like button state
                    const likeButton = document.getElementById('likeButton');
                    if (pin.user_liked) {
                        likeButton.classList.add('active');
                        likeButton.querySelector('svg').style.fill = '#e60023';
                        likeButton.querySelector('svg').style.stroke = '#e60023';
                    } else {
                        likeButton.classList.remove('active');
                        likeButton.querySelector('svg').style.fill = 'none';
                        likeButton.querySelector('svg').style.stroke = 'currentColor';
                    }
                    
                    // Load comments
                    loadComments(pinId);
                } else {
                    console.error('Error in pin details response:', data);
                    alert('Error loading pin details');
                    pinDetailModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }
            })
            .catch(error => {
                console.error('Error loading pin details:', error);
                alert('Error loading pin details');
                pinDetailModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            });
        });
    });
    
    // Close pin detail modal
    closePinDetailModal.addEventListener('click', function() {
        pinDetailModal.style.display = 'none';
        document.body.style.overflow = 'auto'; // Re-enable scrolling
    });
    
    // Close modal when clicking outside of it
    window.addEventListener('click', function(event) {
        if (event.target == pinDetailModal) {
            pinDetailModal.style.display = 'none';
            document.body.style.overflow = 'auto'; // Re-enable scrolling
        }
    });
    
    // Handle comment submission
    // Handle comment submission
document.getElementById('commentForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const pinId = document.getElementById('pinIdInput').value;
    const comment = document.getElementById('commentText').value;
    
    if (!comment.trim()) return;
    
    // Send comment to server
        fetch('/pins/comment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                pin_id: pinId,
                content: comment
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Clear the form
                document.getElementById('commentText').value = '';
                
                // Reload comments to show the new comment
                loadComments(pinId);
                
                // Update the comment count in the pin card
                const pinCard = document.querySelector(`.pin-card[data-pin-id="${pinId}"]`);
                if (pinCard) {
                    const commentCountElem = pinCard.querySelector('.pin-meta span:nth-child(2)');
                    if (commentCountElem) {
                        const currentCount = parseInt(commentCountElem.textContent) || 0;
                        commentCountElem.textContent = `${currentCount + 1} comments`;
                    }
                }
            } else {
                alert('Error posting comment: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error posting comment:', error);
            alert('Error posting comment. Please try again.');
        });
    });
    
    
    // Like button functionality
document.getElementById('likeButton').addEventListener('click', function() {
    const pinId = pinIdInput.value;
    const likeButton = this;
    const likeIcon = likeButton.querySelector('svg');
    const currentLikes = parseInt(likeCount.textContent);
    
    fetch('/pins/like', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            pin_id: pinId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update like count
            likeCount.textContent = data.likeCount;
            
            // Toggle button appearance
            if (data.liked) {
                likeButton.classList.add('active');
                likeIcon.style.fill = '#e60023';
                likeIcon.style.stroke = '#e60023';
                
                // Animate the heart
                likeIcon.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    likeIcon.style.transform = 'scale(1)';
                }, 200);
            } else {
                likeButton.classList.remove('active');
                likeIcon.style.fill = 'none';
                likeIcon.style.stroke = 'currentColor';
            }
            
            // Update the like count in the pin card on the board page
            const pinCard = document.querySelector(`.pin-card[data-pin-id="${pinId}"]`);
            if (pinCard) {
                const pinLikeCount = pinCard.querySelector('.pin-meta span:first-child');
                if (pinLikeCount) {
                    pinLikeCount.textContent = `${data.likeCount} likes`;
                }
            }
        } else {
            alert('Error liking pin: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error liking pin:', error);
    });
});
    
    // Function to load comments
    // Function to load comments
     function loadComments(pinId) {
        fetch(`/pins/${pinId}/comments`)
        .then(response => response.json())
        .then(data => {
            const commentsContainer = document.getElementById('commentsContainer');
            commentsContainer.innerHTML = '';
            
            if (data.success && data.comments && data.comments.length > 0) {
                data.comments.forEach(comment => {
                    const commentEl = document.createElement('div');
                    commentEl.className = 'comment';
                    commentEl.setAttribute('data-comment-id', comment.comment_id);
                    
                    const initial = comment.username ? comment.username.charAt(0).toUpperCase() : 'U';
                    
                    // Check if the current user can delete this comment
                    const currentUserId = <%= user.user_id %>;
                    const canDelete = comment.user_id === currentUserId || <%= board.user_id %> === currentUserId;
                    
                    commentEl.innerHTML = `
                        <div class="comment-header">
                            <div class="comment-author">
                                <div class="user-avatar">${initial}</div>
                                <span>${comment.username || 'User'}</span>
                            </div>
                            <div class="comment-actions">
                                <span class="comment-date">${formatDate(new Date(comment.comment_date))}</span>
                                ${canDelete ? `
                                <button class="delete-comment-btn" onclick="deleteComment(${comment.comment_id}, event)">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="3 6 5 6 21 6"></polyline>
                                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                    </svg>
                                </button>
                                ` : ''}
                            </div>
                        </div>
                        <div class="comment-content">${comment.content}</div>
                    `;
                    commentsContainer.appendChild(commentEl);
                });
            } else {
                commentsContainer.innerHTML = '<p class="no-comments">No comments yet. Be the first to comment!</p>';
            }
        })
        .catch(error => {
            console.error('Error loading comments:', error);
            document.getElementById('commentsContainer').innerHTML = 
                '<p class="no-comments">Failed to load comments. Please try again.</p>';
        });
    }
    
    // Function to delete a comment
    function deleteComment(commentId, event) {
        event.preventDefault();
        
        if (!confirm('Are you sure you want to delete this comment?')) {
            return;
        }
        
        fetch(`/pins/comments/${commentId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove the comment from the DOM
                const commentEl = document.querySelector(`.comment[data-comment-id="${commentId}"]`);
                if (commentEl) {
                    commentEl.remove();
                }
                
                // Update comment count in the pin card
                const pinId = document.getElementById('pinIdInput').value;
                const pinCard = document.querySelector(`.pin-card[data-pin-id="${pinId}"]`);
                if (pinCard) {
                    const commentCountEl = pinCard.querySelector('.pin-meta span:nth-child(2)');
                    if (commentCountEl) {
                        const currentCount = parseInt(commentCountEl.textContent) || 0;
                        commentCountEl.textContent = `${Math.max(0, currentCount - 1)} comments`;
                    }
                }
                
                // If there are no comments left, show the "no comments" message
                const commentsContainer = document.getElementById('commentsContainer');
                if (commentsContainer.children.length === 0) {
                    commentsContainer.innerHTML = '<p class="no-comments">No comments yet. Be the first to comment!</p>';
                }
            } else {
                alert('Error deleting comment: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error deleting comment:', error);
            alert('Failed to delete comment. Please try again.');
        });
    }
        
    // Helper function to format dates
    function formatDate(date) {
        const now = new Date();
        const diff = Math.floor((now - date) / 1000); // Difference in seconds
        
        if (diff < 60) {
            return 'Just now';
        } else if (diff < 3600) {
            const minutes = Math.floor(diff / 60);
            return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
        } else if (diff < 86400) {
            const hours = Math.floor(diff / 3600);
            return `${hours} hour${hours > 1 ? 's' : ''} ago`;
        } else {
            return date.toLocaleDateString();
        }
    }

    // Enable/disable comment button based on input
    document.getElementById('commentText').addEventListener('input', function() {
        const submitBtn = document.querySelector('.comment-submit-btn');
        submitBtn.disabled = !this.value.trim();
    });
    // -----------------------------------------------------------------

    // Repin Modal Functionality
    const repinModal = document.getElementById('repinModal');
    const repinButton = document.getElementById('repinButton');
    const closeRepinModalBtn = document.getElementById('closeRepinModal');
    const repinPinId = document.getElementById('repinPinId');
    const repinBoard = document.getElementById('repinBoard');
    const repinForm = document.getElementById('repinForm');

    // Open repin modal when clicking repin button
    repinButton.addEventListener('click', function() {
        const pinId = document.getElementById('pinIdInput').value;
        repinPinId.value = pinId;

        // Load user's boards for selection
        loadUserBoards()
            .then(() => {
                repinModal.style.display = 'block';
                document.body.style.overflow = 'hidden'; // Prevent scrolling
            })
            .catch(error => {
                console.error('Error loading user boards:', error);
                alert('Failed to load your boards. Please try again.');
            });
    });

    // Close repin modal
    closeRepinModalBtn.addEventListener('click', function() {
        closeRepinModal();
    });

    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target == repinModal) {
            closeRepinModal();
        }
    });

    // Function to close repin modal
    function closeRepinModal() {
        repinModal.style.display = 'none';
        document.body.style.overflow = 'auto'; // Re-enable scrolling
    }

    // Function to load user's boards
    async function loadUserBoards() {
        try {
            console.log('Fetching user boards...');

            const response = await fetch('/boards/user-boards', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin' // Important for sending cookies with the request
            });

            console.log('User boards response:', response);

            if (!response.ok) {
                console.error('Error response:', response.status, response.statusText);
                const text = await response.text();
                console.error('Response body:', text);
                throw new Error(`Server returned ${response.status}: ${text}`);
            }

            console.log('User boards response:', response);

            const data = await response.json();
            console.log('User boards data:', data);

            // Clear previous options
            repinBoard.innerHTML = '';

            // Remove previous no-boards message if exists
            const prevMessage = repinForm.querySelector('.no-boards-message');
            if (prevMessage) {
                prevMessage.remove();
            }

            if (data.success && data.boards && data.boards.length > 0) {
                // Populate select with user's boards
                data.boards.forEach(board => {
                    const option = document.createElement('option');
                    option.value = board.board_id;
                    option.textContent = board.board_name;
                    repinBoard.appendChild(option);
                });
                console.log('Successfully loaded', data.boards.length, 'boards');
            } else {
                // No boards found or error in response
                console.log('No boards found or error in response:', data);
                repinBoard.innerHTML = '<option value="" disabled selected>You need to create a board first</option>';

                // Show message and link to create a board
                const noBoards = document.createElement('div');
                noBoards.className = 'no-boards-message';
                noBoards.innerHTML = `
                <p>You don't have any boards yet.</p>
                <a href="#" class="create-board-link" id="createBoardLink">Create a board</a>
            `;

                repinForm.insertBefore(noBoards, repinForm.querySelector('.form-actions'));

                // Add event listener to create board link
                document.getElementById('createBoardLink').addEventListener('click', function(e) {
                    e.preventDefault();
                    closeRepinModal();

                    // Open create board modal if it exists
                    const createBoardModal = document.getElementById('createBoardModal');
                    if (createBoardModal) {
                        createBoardModal.style.display = 'block';
                        document.body.style.overflow = 'hidden';
                    } else {
                        // Redirect to library page if modal doesn't exist
                        window.location.href = '/library';
                    }
                });
            }
        } catch (error) {
            console.error('Error fetching user boards:', error);
            // Add a more descriptive error message
            alert('Failed to load your boards. Please try again. Error: ' + error.message);
            throw error;
        }
    }

    // Handle repin form submission
    repinForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Check if board is selected
        if (!repinBoard.value) {
            alert('Please select a board to repin to');
            return;
        }

        try {
            const formData = new FormData(repinForm);
            const response = await fetch('/pins/repin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    pin_id: formData.get('pin_id'),
                    board_id: formData.get('board_id'),
                    description: formData.get('description')
                })
            });

            const result = await response.json();

            if (result.success) {
                // Close the modal
                closeRepinModal();

                // Show success message
                const successMessage = document.createElement('div');
                successMessage.className = 'repin-success-message';
                successMessage.textContent = 'Pin saved to your board!';
                document.body.appendChild(successMessage);

                // Remove success message after 3 seconds
                setTimeout(() => {
                    document.body.removeChild(successMessage);
                }, 3000);
            } else {
                alert('Error repinning: ' + result.message);
            }
        } catch (error) {
            console.error('Error repinning:', error);
            alert('Failed to repin. Please try again.');
        }
    });

     document.querySelectorAll('.pin-source-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            // Remove active class from all tabs
            document.querySelectorAll('.pin-source-tab').forEach(t => t.classList.remove('active'));
            // Add active class to clicked tab
            this.classList.add('active');
            
            // Hide all source sections
            document.querySelectorAll('.pin-source-section').forEach(s => s.classList.remove('active'));
            
            // Show the correct section
            const source = this.getAttribute('data-source');
            document.getElementById(source + 'Section').classList.add('active');
            
            // Reset form fields
            if (source === 'url') {
                document.getElementById('pinImage').value = '';
                document.querySelector('.image-preview-container').innerHTML = '';
            } else {
                document.getElementById('pinUrl').value = '';
                document.getElementById('sourceUrl').value = '';
                document.querySelector('.url-preview-container').innerHTML = '';
            }
        });
    });
    
    // Image preview for upload
    document.getElementById('pinImage').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewContainer = document.querySelector('.image-preview-container');
                previewContainer.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
            }
            reader.readAsDataURL(file);
        }
    });
    
    // Image preview for URL
    document.getElementById('pinUrl').addEventListener('input', debounce(function(e) {
        const url = e.target.value.trim();
        const previewContainer = document.querySelector('.url-preview-container');
        
        if (url && isValidUrl(url)) {
            previewContainer.innerHTML = `
                <div class="loading-preview">Loading preview...</div>
                <img src="${url}" alt="Preview" 
                     onload="this.parentNode.querySelector('.loading-preview')?.remove()" 
                     onerror="this.parentNode.innerHTML = '<div class=\'preview-error\'>Could not load image</div>'">
            `;
        } else {
            previewContainer.innerHTML = '';
        }
    }, 500));

    
    
    // Validate form before submission
    document.getElementById('addPinForm').addEventListener('submit', function(e) {
        const activeTab = document.querySelector('.pin-source-tab.active').getAttribute('data-source');
        let isValid = true;
        let errorMessage = '';
        
        if (activeTab === 'upload') {
            const fileInput = document.getElementById('pinImage');
            if (!fileInput.files.length) {
                isValid = false;
                errorMessage = 'Please select an image to upload';
            }
        } else if (activeTab === 'url') {
            const urlInput = document.getElementById('pinUrl');
            if (!urlInput.value.trim() || !isValidUrl(urlInput.value.trim())) {
                isValid = false;
                errorMessage = 'Please enter a valid image URL';
            }
        }
        
        if (!isValid) {
            e.preventDefault();
            alert(errorMessage);
        }
    });
    
    // Utility functions
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
    
    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }


    // Add this to your existing JavaScript for the pin modal
document.addEventListener('DOMContentLoaded', function() {
    // Pin source tab switching
    document.querySelectorAll('.pin-source-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            // Update active tab
            document.querySelectorAll('.pin-source-tab').forEach(t => 
                t.classList.remove('active'));
            this.classList.add('active');
            
            // Show corresponding section
            const source = this.getAttribute('data-source');
            document.querySelectorAll('.pin-source-section').forEach(section => {
                if (section.id === source + 'Section') {
                    section.classList.add('active');
                } else if (section.id) { // Only hide sections with IDs (not the shared description/tags section)
                    section.classList.remove('active');
                }
            });
        });
    });
    
    // Image preview for upload
    document.getElementById('pinImage')?.addEventListener('change', function(e) {
        const file = e.target.files[0];
        const previewContainer = document.querySelector('.image-preview-container');
        
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewContainer.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                
                // Update upload text
                const uploadText = document.querySelector('.upload-text');
                if (uploadText) {
                    uploadText.textContent = file.name;
                }
            };
            reader.readAsDataURL(file);
        } else {
            previewContainer.innerHTML = '';
        }
    });
    
    // Image preview for URL
    document.getElementById('pinUrl')?.addEventListener('input', debounce(function(e) {
        const url = e.target.value.trim();
        const previewContainer = document.querySelector('.url-preview-container');
        
        if (url && isValidUrl(url)) {
            previewContainer.innerHTML = `
                <div class="loading-preview">Loading preview...</div>
                <img src="${url}" alt="Preview" 
                     onload="this.parentNode.querySelector('.loading-preview')?.remove()" 
                     onerror="this.parentNode.innerHTML = '<div class=\'preview-error\'>Could not load image</div>'">
            `;
        } else {
            previewContainer.innerHTML = '';
        }
    }, 500));
    
    // Form validation
    document.getElementById('addPinForm')?.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const activeTab = document.querySelector('.pin-source-tab.active')?.getAttribute('data-source');
        let isValid = true;
        let errorMessage = '';
        
        if (activeTab === 'upload') {
            const fileInput = document.getElementById('pinImage');
            if (!fileInput.files.length) {
                isValid = false;
                errorMessage = 'Please select an image to upload';
            }
        } else if (activeTab === 'url') {
            const urlInput = document.getElementById('pinUrl');
            if (!urlInput.value.trim() || !isValidUrl(urlInput.value.trim())) {
                isValid = false;
                errorMessage = 'Please enter a valid image URL';
            }
        }
        
        if (!isValid) {
            alert(errorMessage);
        } else {
            this.submit();
        }
    });
});

// Utility function for debouncing
function debounce(func, wait) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

// Utility function to validate URLs
function isValidUrl(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}


// Add these functions to the script section at the bottom of the board view page
function openDeleteBoardModal() {
    const modal = document.getElementById('deleteBoardModal');
    modal.style.display = "block";
    document.body.style.overflow = "hidden"; // Prevent scrolling
}

function closeDeleteBoardModal() {
    const modal = document.getElementById('deleteBoardModal');
    modal.style.display = "none";
    document.body.style.overflow = "auto"; // Re-enable scrolling
}

// Close modal when clicking outside of it
window.addEventListener('click', function(event) {
    const modal = document.getElementById('deleteBoardModal');
    if (event.target == modal) {
        closeDeleteBoardModal();
    }
});

</script>